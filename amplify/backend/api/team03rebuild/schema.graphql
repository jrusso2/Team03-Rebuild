# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type User @model {
  id: ID!
  username: String!
  email: String!
  role: UserRole! # "admin", "driver", "sponsor"
  
  # Driver-specific fields
  sponsor: Sponsor @belongsTo
  points: Int
  pointHistory: [PointHistory] @hasMany
  driverProfile: DriverProfile @hasOne
  purchases: [Purchase] @hasMany

  # Admin-specific fields
  adminProfile: AdminProfile @hasOne
  adminReports: [Report] @hasMany

  # Sponsor-specific fields
  sponsoredDrivers: [DriverProfile] @hasMany
  productCatalog: [Product] @hasMany
  pointConversionRate: Float
  sponsorReports: [Report] @hasMany
}

# Enum to Define User Roles
enum UserRole {
  ADMIN
  DRIVER
  SPONSOR
}

type Sponsor @model {
  id: ID!
  name: String!
  productCatalog: [Product] @hasMany
  pointConversionRate: Float! # Conversion rate from dollars to points
  users: [User] @hasMany # Sponsors can have multiple users (drivers and sponsor users)
  reports: [Report] @hasMany
}

type Product @model {
  id: ID!
  name: String!
  description: String!
  price: Float!
  pointsValue: Int! # Calculated based on pointConversionRate
  purchases: [Purchase] @hasMany # Establish relationship with Purchase
}

type Purchase @model {
  id: ID!
  user: User @belongsTo # Associated with a User
  product: Product @belongsTo(fields: ["productID"]) # Establish relationship with Product
  productID: ID! # Foreign key for Product
  status: String! # (e.g., "Pending", "Completed", "Cancelled")
  purchaseDate: AWSDateTime!
}


type PointHistory @model {
  id: ID!
  user: User @belongsTo # Associated with User instead of Driver
  date: AWSDateTime!
  pointsChange: Int!
  reason: String!
}

type AdminProfile @model {
  id: ID!
  user: User @belongsTo # Associated with a User instead of Administrator
  contactEmail: String!
}

type DriverProfile @model {
  id: ID!
  user: User @belongsTo # Associated with a User instead of Driver
  contactEmail: String!
  applicationStatus: String! # (e.g., "Pending", "Accepted", "Rejected")
}

type Report @model {
  id: ID!
  type: String! # (e.g., "Driver Point Tracking", "Sales by Sponsor")
  generatedBy: User @belongsTo # Associated with a User instead of Administrator
  sponsor: Sponsor @belongsTo
  dateRangeStart: AWSDateTime
  dateRangeEnd: AWSDateTime
  reportData: AWSJSON!
}

type AuditLog @model {
  id: ID!
  user: String!
  action: String! # (e.g., "Login", "Point Adjustment", "Profile Update")
  timestamp: AWSDateTime!
  details: AWSJSON
}